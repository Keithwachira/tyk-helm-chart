{{- if .Values.mdcb.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mdcb-{{ include "tyk-pro.fullname" . }}
  labels:
    app: mdcb-{{ include "tyk-pro.fullname" . }}
    chart: {{ include "tyk-pro.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.mdcb.replicaCount }}
  minReadySeconds: 5
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: mdcb-{{ include "tyk-pro.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: mdcb-{{ include "tyk-pro.fullname" . }}
        release: {{ .Release.Name }}
    spec:
{{- if .Values.mdcb.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.mdcb.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.mdcb.tolerations }}
      tolerations:
{{ toYaml .Values.mdcb.tolerations | indent 8 }}
{{- end }}
{{- if .Values.mdcb.affinity }}
      affinity:
{{ toYaml .Values.mdcb.affinity | indent 8 }}
{{- end }}
      containers:
      - image: "{{ .Values.mdcb.image.repository }}:{{ .Values.mdcb.image.tag }}"
        imagePullPolicy: {{ .Values.mdcb.image.pullPolicy }}
        name: dashboard-{{ .Chart.Name }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - all
        envFrom:
        - configMapRef:
            name: mdcb-env-conf-{{ include "tyk-pro.fullname" . }}
        env:
        - name: TYK_MDCB_LICENSE
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: MDCBLicense
        - name: TYK_MDCB_ANALYTICSCONFIG_MONGOURL
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: mongoURL
        - name: TYK_MDCB_STORAGE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: redisPass
        resources:
        {{ toYaml .Values.mdcb.resources | indent 12 }}
        command: ["/opt/tyk-sink/tyk-sink"]
        workingDir: /opt/tyk-sink
        ports:
        - containerPort: {{ .Values.mdcb.containerPort }}
        volumeMounts:
          - name: {{ .Release.Name }}-default-cert
            mountPath: /etc/certs
          {{- if .Values.mdcb.certificate }}
          - name: tyk-mdcb-certs-crt
            mountPath: /etc/certs/crts
          - name: tyk-mdcb-certs-key
            mountPath: /etc/certs/keys
          {{- end }}
          {{- if .Values.mdcb.mounts }}
          {{- range $secret := .Values.mdcb.mounts }}
          - name: {{ $.Release.Name }}-mdcb-secret-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
          {{- end }}
          {{- end }}
        livenessProbe:
          httpGet:
            scheme: "HTTP"
            path: /health
            port: {{ .Values.mdcb.healthcheckport }}
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 3
          failureThreshold: 2
        readinessProbe:
          httpGet:
            scheme: "HTTP"
            path: /health
            port: {{ .Values.mdcb.healthcheckport }}
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      {{- with .Values.mdcb.image.pullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
      volumes:
        - name: {{ .Release.Name }}-default-cert
          secret:
            secretName: {{ .Release.Name }}-default-cert
        {{- if .Values.mdcb.certificate }}
        - name: tyk-mdcb-certs-crt
          secret:
            secretName: {{ .Values.mdcb.certificate.certSecret }}
        - name: tyk-mdcb-certs-key
          secret:
            secretName: {{ .Values.mdcb.certificate.keySecret }}
        {{- end }}
        {{- if .Values.mdcb.mounts }}
        {{- range $secret := .Values.mdcb.mounts }}
        - name: {{ $.Release.Name }}-mdcb-secret-{{ $secret.name }}
          secret:
            secretName: {{ $.Release.Name }}-mdcb-secret-{{ $secret.name }}
        {{- end }}
        {{- end }}
{{- end }}
