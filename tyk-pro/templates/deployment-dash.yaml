{{- if .Values.dash.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard-{{ include "tyk-pro.fullname" . }}
  labels:
    app: dashboard-{{ include "tyk-pro.fullname" . }}
    chart: {{ include "tyk-pro.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.dash.replicaCount }}
  minReadySeconds: 5
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: dashboard-{{ include "tyk-pro.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: dashboard-{{ include "tyk-pro.fullname" . }}
        release: {{ .Release.Name }}
      annotations:
      # Enable backward compatibility to chart 0.8.1.
      {{- if or .Values.gateway.enableIstioIngress .Values.enableIstioIngress }}
        traffic.sidecar.istio.io/excludeInboundPorts: "{{ .Values.dash.containerPort }}"
        traffic.sidecar.istio.io/includeInboundPorts: ""
      {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap-dashboard.yaml") . | sha256sum }}
    spec:
{{- if .Values.dash.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.dash.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.dash.tolerations }}
      tolerations:
{{ toYaml .Values.dash.tolerations | indent 8 }}
{{- end }}
{{- if .Values.dash.affinity }}
      affinity:
{{ toYaml .Values.dash.affinity | indent 8 }}
{{- end }}
      containers:
      - image: "{{ .Values.dash.image.repository }}:{{ .Values.dash.image.tag }}"
        imagePullPolicy: {{ .Values.dash.image.pullPolicy }}
        name: dashboard-{{ .Chart.Name }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - all
        envFrom:
        - configMapRef:
            name: dashboard-env-conf-{{ include "tyk-pro.fullname" . }}
        env:
        - name: TYK_DB_ADMINSECRET
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: AdminSecret
        - name: TYK_DB_NODESECRET
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: APISecret
        - name: TYK_DB_TYKAPI_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: APISecret
        - name: TYK_DB_LICENSEKEY
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: DashLicense
        {{ if eq "postgres" (include "tyk-pro.backend" .) }}
        - name: TYK_DB_STORAGE_MAIN_CONNECTIONSTRING
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end }}
              key: pgConnectionString
        {{ else }}
        - name: TYK_DB_STORAGE_MAIN_CONNECTIONSTRING
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: mongoURL
        {{ end }}
        - name: TYK_DB_REDISPASSWORD
          valueFrom:
            secretKeyRef:
              name:{{ if .Values.secrets.useSecretName }} {{ .Values.secrets.useSecretName }} {{ else }} secrets-{{ include "tyk-pro.fullname" . }} {{ end}}
              key: redisPass
        resources:
{{ toYaml .Values.dash.resources | indent 12 }}
        command: ["/opt/tyk-dashboard/tyk-analytics", "--conf=/etc/tyk-dashboard/tyk_analytics.conf"]
        workingDir: /opt/tyk-dashboard
        ports:
        - containerPort: {{ .Values.dash.containerPort }}
        volumeMounts:
          {{- if .Values.dash.tls}}
          - name: {{.Values.certificates.caConfigMapName}}
            mountPath: /etc/ssl/certs/{{.Values.certificates.caBundleFileName}}
            subPath: {{.Values.certificates.caBundleFileName}}
            readOnly: false
          {{- end }}
          - name: tyk-dashboard-conf
            mountPath: /etc/tyk-dashboard
          {{- if .Values.dash.certificates }}
          {{- range $i, $certset := .Values.dash.certificates }}
          - name: tyk-dash-certs-crt-{{ $i }}
            mountPath: /etc/certs/crts
          - name: tyk-dash-certs-key-{{ $i }}
            mountPath: /etc/certs/keys
          {{- end }}
          {{- end }}
          {{- if .Values.dash.mounts }}
          {{- range $secret := .Values.dash.mounts }}
          - name: {{ $.Release.Name }}-dash-secret-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
          {{- end }}
          {{- end }}
        livenessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.dash.tls }}S{{ end }}"
            path: /
            port: {{ .Values.dash.containerPort }}
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 3
          failureThreshold: 2
        readinessProbe:
          httpGet:
            scheme: "HTTP{{ if .Values.dash.tls }}S{{ end }}"
            path: /
            port: {{ .Values.dash.containerPort }}
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
      volumes:
        {{- if .Values.dash.tls }}
        - name: {{.Values.certificates.caConfigMapName}}
          configMap:
            name: {{.Values.certificates.caConfigMapName}}
        {{- end }}
        - name: tyk-dashboard-conf
          configMap:
            name: dashboard-conf-{{ include "tyk-pro.fullname" . }}
            items:
              - key: tyk_analytics.conf
                path: tyk_analytics.conf
        {{- if .Values.dash.certificates }}
        {{- range $i, $certset := .Values.dash.certificates }}
        - name: tyk-dash-certs-crt-{{ $i }}
          secret:
            secretName: {{ $certset.certSecret }}
        - name: tyk-dash-certs-key-{{ $i }}
          secret:
            secretName: {{ $certset.keySecret }}
        {{- end }}
        {{- end }}
        {{- if .Values.dash.mounts }}
        {{- range $secret := .Values.dash.mounts }}
        - name: {{ $.Release.Name }}-dash-secret-{{ $secret.name }}
          secret:
            secretName: {{ $.Release.Name }}-dash-secret-{{ $secret.name }}
        {{- end }}
        {{- end }}
{{- end }}
